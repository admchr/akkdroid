task wrapper(type: Wrapper) {
    gradleVersion = "1.5"
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'idea'

    version = "1.0"

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

subprojects {
    ext {
        scalaVersion = "2.10.1"
        akkaVersion = "2.1.2"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        scalaTools "org.scala-lang:scala-compiler:$scalaVersion"
        compile "org.scala-lang:scala-library:$scalaVersion"
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

project("core") {
    dependencies {

    }
}

project("server") {
    dependencies {
        compile(project(":core"))
        compile "com.typesafe.akka:akka-actor_2.10:$akkaVersion"
        compile "com.typesafe.akka:akka-remote_2.10:$akkaVersion"
    }
}

project("client") {
    sourceSets.main.java {
        srcDir "gen"
    }

    dependencies {
        compile(project(":core"))
        compile "com.typesafe.akka:akka-actor_2.10:$akkaVersion"
        compile "com.typesafe.akka:akka-remote_2.10:$akkaVersion"
    }

    idea.module {
        jdkName = "Android 2.3.3 Platform"

        iml.withXml {
            def module = it.asNode()

            def facetManager = module.component.find { it.@name == "FacetManager" }
            if (!facetManager) {
                facetManager = module.appendNode("component", [name: "FacetManager"])
            }

            def scalaFacet = facetManager.facet.find { it.@type == "android" }
            if (!scalaFacet) {
                scalaFacet = facetManager.appendNode("facet", [type: "android", name: "Android"])
            }

            def configuration = scalaFacet.configuration[0]
            if (!configuration) {
                configuration = scalaFacet.appendNode("configuration")
            }

            def runProguard = configuration.option.find { it.@name == "RUN_PROGUARD" }
            if (!runProguard) {
                runProguard = configuration.appendNode("option", [name: "RUN_PROGUARD"])
            }
            runProguard.@value = "true"

            def updatePropertyFiles = configuration.option.find { it.@name == "UPDATE_PROPERTY_FILES" }
            if (!updatePropertyFiles) {
                updatePropertyFiles = configuration.appendNode("option", [name: "UPDATE_PROPERTY_FILES"])
            }
            updatePropertyFiles.@value = "true"

            def newModuleRootManager = module.component.find { it.@name == "NewModuleRootManager" }
            def jdkOrderEntry = newModuleRootManager.orderEntry.find { it.@type == "jdk" }
            jdkOrderEntry.@jdkType = "Android SDK"
        }
    }
}

